#!/bin/bash

# -----------------------[SLURM : START]---------------------------
# -- run name --
#SBATCH --job-name=Annotate

#  -- email preferences --
#SBATCH --mail-user=rodrigo.gularte@ulg.ac.be
#SBATCH --mail-type=FAIL
#     (ALL = BEGIN, END, FAIL, REQUEUE)

# -- output prefex
#SBATCH --output="TxAnnotate-%j.out"
#     %j     Job allocation number.
#     %N     Main node name.  

# -- time requierements --
##SBATCH --time=48:00:00  # "days-hours:minutes:seconds"

# ---- Resources ----
#SBATCH --ntasks=32 --mem-per-cpu=2000


# ---- Array Control ----  
# -- format: 0-7:1 0 through 7 by one
##SBATCH --array=0-19   ## add at comand line

# -----------------------[SLURM : END]---------------------------
## Require arugment of Fastq folder to continue

## Kill script if any commands fail
set -e -x
source ../../envar.sh

FASTA=$1
CDS=$2
mRNA=$3
PEP=$4

SPROT=$GLOBALSCRATCH/SwissProt/uniprot_sprot.fasta
U90=$GLOBALSCRATCH/Uniref90/uniref90.fasta
TREMBL=$GLOBALSCRATCH/TrEMBL/uniprot_trembl.fasta

## SwissProt
blastx -query $FASTA -db $SPROT -num_threads $SLURM_NTASKS -max_target_seqs 1 -outfmt 6 > $FASTA.sprot.blastx.out &
#blastx  -query $CDS -db $SPROT -num_threads $SLURM_NTASKS -max_target_seqs 1 -outfmt 6 > $CDS.sprot.blastx.out &
#blastx -query $mRNA -db $SPROT -num_threads $SLURM_NTASKS -max_target_seqs 1 -outfmt 6 > $mRNA.sprot.blastx.out &
blastp -query $PEP -db $SPROT -num_threads 8 -max_target_seqs 1 -outfmt 6 > $PEP.sprot.blastp.out &
#wait

## Uniref90
blastx -query $FASTA -db $U90 -num_threads $SLURM_NTASKS -max_target_seqs 1 -outfmt 6 > $FASTA.u90.blastx.out &
#blastx  -query $CDS -db $U90 -num_threads $SLURM_NTASKS -max_target_seqs 1 -outfmt 6 > $CDS.u90.blastx.out &
#blastx -query $mRNA -db $U90 -num_threads $SLURM_NTASKS -max_target_seqs 1 -outfmt 6 > $mRNA.u90.blastx.out &
blastp -query $PEP -db $U90 -num_threads 8 -max_target_seqs 1 -outfmt 6 > $PEP.u90.blastp.out &
#wait

## TrEMBL
blastx -query $FASTA -db $TREMBL -num_threads $SLURM_NTASKS -max_target_seqs 1 -outfmt 6 > $FASTA.trembl.blastx.out &
#blastx  -query $CDS -db $TREMBL -num_threads $SLURM_NTASKS -max_target_seqs 1 -outfmt 6 > $CDS.trembl.blastx.out &
#blastx -query $mRNA -db $TREMBL -num_threads $SLURM_NTASKS -max_target_seqs 1 -outfmt 6 > $mRNA.trembl.blastx.out &
blastp -query $PEP -db $TREMBL -num_threads 8 -max_target_seqs 1 -outfmt 6 > $PEP.trembl.blastp.out &
#wait

hmmscan --cpu 8 --domtblout $PEP.PFAM.hmm.out ~/Pfam/Pfam-A.hmm $PEP 1> $PEP.pfam.out 2> $PEP.pfam.log &

~/src/signalp-4.1/signalp -f short -p png -n $PEP.signalp.gff $PEP 1> $PEP.signalp.out 2> $PEP.signalp.log &

## tmhmm --short $PEP > $PEP.tmhmm.out & ## not working
## Use modified `~/src/tmhmm-2.0c/bin/tmhmmformat.pl` have default short output i.e.
## $opt_short = 1;      # Make short output format
## $opt_plot = 0;       # Make plots
sed s/\*// $PEP | decodeanhmm.Linux_x86_64 -f ~/lib/TMHMM2.0.options -modelfile ~/lib/TMHMM2.0.model -plp | tee $PEP.tmhmmLong.out | tmhmmformat.pl > $PEP.tmhmm.out &

## run rnammer on the mac : isntall `brew install rnammer`
## rnammer -S euk -multi -xml $FASTA.rRNA.xml -gff $FASTA.rRNA.gff -f $FASTA.rRNA.fa -h $FASTA.rRNA.hmm.log $FASTA &
## ~/src/Trinotate/util/rnammer_support/RnammerTranscriptome.pl --transcriptome $FASTA --path_to_rnammer ~/bin/rnammer 2> $FASTA.rnammer.log &

wait
