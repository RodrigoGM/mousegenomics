#!/bin/bash

# -----------------------[SLURM : START]---------------------------
# -- run name --
#SBATCH --job-name=TH_Cuff

#  -- email preferences --
##SBATCH --mail-user=rodrigo.gularte@ulg.ac.be
##SBATCH --mail-type=BEGIN
##SBATCH --mail-type=END
#SBATCH --mail-type=FAIL
#     (ALL = BEGIN, END, FAIL, REQUEUE)

# -- output prefex
#SBATCH --output="assembl-%j.out"

#  By default both standard output and  standard  error are 
# directed to a file of the name "slurm-%j.out", where the "%j" 
# is replaced with the job allocation number.   The filename 
# pattern may contain one or more replacement symbols, which are 
# a percent sign "%" followed by a letter (e.g. %j).
# Supported replacement symbols are:
#     %j     Job allocation number.
#     %N     Main node name.  


# -- time requierements --
#SBATCH --time=24:00:00
# Acceptable time formats include "minutes", "minutes:seconds", 
# "hours:minutes:seconds", "days-hours", "days-hours:minutes" 
# and "days-hours:minutes:seconds"
# ** Note that the lower the requested run-time, the higher the
#    chances to get scheduled to 'fill in the gaps' between other
#    jobs. 

# ---- Resources ----
#SBATCH --ntasks-per-node=16 --mem-per-cpu=2000

# ---- Array Control ----  
# -- format: 0-7:1 0 through 7 by one
#SBATCH --array=0-19:1   ## add at comand line


# -----------------------[SLURM : END]---------------------------
## Require arugment of Fastq folder to continue
## echo "sbatch --array=0-<NumLib> tophat.map.slq /path/to/fastq/ /path/to/output/"
## echo "This script expects the directory name and output directory as first,"
## echo " and second arguments, respectively"
## echo "Fastq files are standard from Illumina <SampleID>_<LibraryID/Index_LANE_...fastq.gz>"
## echo "and that the fastq for R1/R2 are in the same directory. "
## echo "It also expects that the --library-type argument for running tophat "
## echo "and cufflinks is specified in the second argument."
## echo "Valid library types are : ";
## echo "fr-unstranded, fr-firststrand, fr-secondstrand"

[[ $# -gt 0 ]] || {

  exit 1; }

## Kill script if any commands fail
set -e -x

source ../envar.sh

## make a list of all your fastq.gz files in one 
## create array of sequences 

R1=(`ls $1*R1*gz`)
R2=(`ls $1*R2*gz`)


## echo "EXPERIMENT FILES :: ${R1[@]}"

## sample id  management 
NAME=`echo ${R1[$SLURM_ARRAY_TASK_ID]} | awk '{n=split($0,arra,"/"); split(arra[n],brra,"_"); print brra[1]}'`
STRAIN=`echo ${R1[$SLURM_ARRAY_TASK_ID]} | awk '{n=split($0,arra,"/"); split(arra[n],brra,"_"); print brra[2]}'`
POOL=`echo ${R1[$SLURM_ARRAY_TASK_ID]} | awk '{n=split($0,arra,"/"); split(arra[n],brra,"_"); print brra[3]}'`
TISSUE=`echo ${R1[$SLURM_ARRAY_TASK_ID]} | awk '{n = split($0, arra, "/"); split(arra[n], brra, "_"); print brra[3];}' | awk '{n = split($0, arra, "-"); print arra[1];}'`
LANE=`echo ${R1[$SLURM_ARRAY_TASK_ID]} | awk '{split($1,BARR,"_"); for (x in BARR) if (index(BARR[x],"L0") == 1){ print BARR[x]};}'`

## provide output directory
OUTDIR=${2}${STRAIN}_${POOL}_${LIBTYPE}_${LANE}

echo " # ======== RUN INFORMATION ======== # "

echo "RUN FOR FILES     ::   ${R1[$SLURM_ARRAY_TASK_ID]} ${R2[$SLURM_ARRAY_TASK_ID]}"
echo "SAMPLE            ::   ${NAME} ${STRAIN} ${POOL}"
echo "ARRAY             ::   $SLURM_ARRAY_TASK_ID"
echo "SAVING RESULTS TO ::   ${OUTDIR}"

echo " # ====== PROCESS START  ====== # "


echo "START TOPHAT2     ::  " `date`
echo "Running tophat for the first time"
tophat2 -o ${OUTDIR} --GTF ${GTF} --library-type ${LIBTYPE} --num-threads $SLURM_JOB_CPUS_PER_NODE \
    --rg-id ${STRAIN}_${POOL} --rg-sample ${STRAIN}_${POOL} --rg-library ${LIBTYPE} \
    --rg-description `echo $2 | awk '{n=split($0,arra,"/"); print arra[1]}'` \
    --rg-platform-unit $LANE --rg-center "GIGA-Genomics" --rg-platform "Illumina" \
    --b2-very-sensitive ${BWT2} ${R1[$SLURM_ARRAY_TASK_ID]} ${R2[$SLURM_ARRAY_TASK_ID]} 

echo "END TOPHAT2       ::  " `date`

#echo "START TOPHAT2     ::  " `date`
#echo "Running with known junctions file (2nd run)"
#tophat2 -o ${OUTDIR} --GTF ${GTF} --library-type ${LIBTYPE} --num-threads $SLURM_JOB_CPUS_PER_NODE \
#    --b2-very-sensitive -j $4\
#    ${BWT2} ${R1[$SLURM_ARRAY_TASK_ID]} ${R2[$SLURM_ARRAY_TASK_ID]}

#echo "END TOPHAT2       ::  " `date`


echo "START SORTING     ::  " `date`

samtools sort -n -@ $SLURM_JOB_CPUS_PER_NODE ${OUTDIR}/accepted_hits.bam ${OUTDIR}/accepted_hits.nsort
## samtools sort -@ $SLURM_JOB_CPUS_PER_NODE ${OUTDIR}/accepted_hits.bam ${OUTDIR}/accepted_hits.sort

echo "END SORTING       ::  " `date`

echo " # === submitting index and counting ===# "

## idx_htseq.slq is a script which takes accepted_hits.bam, accepted_hits.sort.bam, 
##   and accepte_hits.nsort.bam and indexes them with samtools.  It then runs htseq-qa
##   to perform a quality assesment and then counts the genes with htseq-count.  
## The code was originally in this file, however, it was changed as these processes
##   only require one proessor.
## arguments passed are in order that are required by idx_htseq.slq
##                       $1      $2     $3         $4        $5         $6    $7    $8

sbatch idx_htseq.slq ${MM10} ${BWT2} ${GTF} ${REFFLAT} ${OUTDIR} ${LIBTYPE} ${MMU} ${GFF} 



echo "START CUFFLINKS   ::  " `date`
# running cufflinks 
cufflinks -o ${OUTDIR} -b $MM10 -u -p $SLURM_JOB_CPUS_PER_NODE --GTF ${GTF} --library-type ${LIBTYPE} ${OUTDIR}/accepted_hits.bam

echo "END CUFFLINKS     ::  " `date`
echo "START CUFFQUANT   ::  " `date`

cuffquant -o ${OUTDIR}/ -b $MM10 -u -p $SLURM_JOB_CPUS_PER_NODE --library-type ${LIBTYPE} $GTF ${OUTDIR}/accepted_hits.bam


echo "END CUFFQUANT   ::  " `date`


echo " # ====== POCESS END ====== # "

